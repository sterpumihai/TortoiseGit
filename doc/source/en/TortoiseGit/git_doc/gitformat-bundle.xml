<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect2 SYSTEM "../../../dtd/dblite.dtd">

<sect2 lang="en" id="gitformat-bundle(5)">
    <title>gitformat-bundle(5)</title>
    <date>2024-07-02</date>
<revhistory><revision><date>2024-07-02</date></revision></revhistory>
<indexterm>
<primary>gitformat-bundle(5)</primary>
</indexterm>
<simplesect id="gitformat-bundle(5)__name">
<title>NAME</title>
<simpara>gitformat-bundle - The bundle file format</simpara>
</simplesect>
<simplesect id="gitformat-bundle(5)__synopsis">
<title>SYNOPSIS</title>
<blockquote>
<literallayout>*.bundle
*.bdl</literallayout>
</blockquote>
</simplesect>
<simplesect id="gitformat-bundle(5)__description">
<title>DESCRIPTION</title>
<simpara>The Git bundle format is a format that represents both refs and Git
objects. A bundle is a header in a format similar to
<xref linkend="git-show-ref(1)" /> followed by a pack in *.pack format.</simpara>
<simpara>The format is created and read by the <xref linkend="git-bundle(1)" /> command,
and supported by e.g. <xref linkend="git-fetch(1)" /> and <xref linkend="git-clone(1)" />.</simpara>
</simplesect>
<simplesect id="gitformat-bundle(5)__format">
<title>FORMAT</title>
<simpara>We will use ABNF notation to define the Git bundle format. See
<xref linkend="gitprotocol-common(5)" /> for the details.</simpara>
<simpara>A v2 bundle looks like this:</simpara>
<screen>bundle    = signature *prerequisite *reference LF pack
signature = "# v2 git bundle" LF

prerequisite = "-" obj-id SP comment LF
comment      = *CHAR
reference    = obj-id SP refname LF

pack         = ... ; packfile</screen>
<simpara>A v3 bundle looks like this:</simpara>
<screen>bundle    = signature *capability *prerequisite *reference LF pack
signature = "# v3 git bundle" LF

capability   = "@" key ["=" value] LF
prerequisite = "-" obj-id SP comment LF
comment      = *CHAR
reference    = obj-id SP refname LF
key          = 1*(ALPHA / DIGIT / "-")
value        = *(%01-09 / %0b-FF)

pack         = ... ; packfile</screen>
</simplesect>
<simplesect id="gitformat-bundle(5)__semantics">
<title>SEMANTICS</title>
<simpara>A Git bundle consists of several parts.</simpara>
<itemizedlist>
<listitem>
<simpara>
"Capabilities", which are only in the v3 format, indicate functionality that
        the bundle requires to be read properly.
</simpara>
</listitem>
<listitem>
<simpara>
"Prerequisites" list the objects that are NOT included in the bundle and the
  reader of the bundle MUST already have, in order to use the data in the
  bundle. The objects stored in the bundle may refer to prerequisite objects and
  anything reachable from them (e.g. a tree object in the bundle can reference
  a blob that is reachable from a prerequisite) and/or expressed as a delta
  against prerequisite objects.
</simpara>
</listitem>
<listitem>
<simpara>
"References" record the tips of the history graph, iow, what the reader of the
  bundle CAN "git fetch" from it.
</simpara>
</listitem>
<listitem>
<simpara>
"Pack" is the pack data stream "git fetch" would send, if you fetch from a
  repository that has the references recorded in the "References" above into a
  repository that has references pointing at the objects listed in
  "Prerequisites" above.
</simpara>
</listitem>
</itemizedlist>
<simpara>In the bundle format, there can be a comment following a prerequisite obj-id.
This is a comment and it has no specific meaning. The writer of the bundle MAY
put any string here. The reader of the bundle MUST ignore the comment.</simpara>
<section id="gitformat-bundle(5)__note_on_shallow_clones_and_git_bundles">
<title>Note on shallow clones and Git bundles</title>
<simpara>Note that the prerequisites do not represent a shallow-clone boundary. The
semantics of the prerequisites and the shallow-clone boundaries are different,
and the Git bundle v2 format cannot represent a shallow clone repository.</simpara>
</section>
</simplesect>
<simplesect id="gitformat-bundle(5)__capabilities">
<title>CAPABILITIES</title>
<simpara>Because there is no opportunity for negotiation, unknown capabilities cause <emphasis>git
bundle</emphasis> to abort.</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>object-format</emphasis> specifies the hash algorithm in use, and can take the same
  values as the <emphasis>extensions.objectFormat</emphasis> configuration value.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>filter</emphasis> specifies an object filter as in the <emphasis>--filter</emphasis> option in
  <xref linkend="git-rev-list(1)" />. The resulting pack-file must be marked as a
  <emphasis>.promisor</emphasis> pack-file after it is unbundled.
</simpara>
</listitem>
</itemizedlist>
</simplesect>
<simplesect id="gitformat-bundle(5)__git">
<title>GIT</title>
<simpara>Part of the <xref linkend="git(1)" /> suite</simpara>
</simplesect>
</sect2>
