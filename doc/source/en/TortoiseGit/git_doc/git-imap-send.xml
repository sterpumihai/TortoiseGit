<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect2 SYSTEM "../../../dtd/dblite.dtd">

<sect2 lang="en" id="git-imap-send(1)">
    <title>git-imap-send(1)</title>
    <date>2024-07-02</date>
<revhistory><revision><date>2024-07-02</date></revision></revhistory>
<indexterm>
<primary>git-imap-send(1)</primary>
</indexterm>
<simplesect id="git-imap-send(1)__name">
<title>NAME</title>
<simpara>git-imap-send - Send a collection of patches from stdin to an IMAP folder</simpara>
</simplesect>
<simplesect id="git-imap-send(1)__synopsis">
<title>SYNOPSIS</title>
<blockquote>
<literallayout><emphasis>git imap-send</emphasis> [-v] [-q] [--[no-]curl]</literallayout>
</blockquote>
</simplesect>
<simplesect id="git-imap-send(1)__description">
<title>DESCRIPTION</title>
<simpara>This command uploads a mailbox generated with <emphasis>git format-patch</emphasis>
into an IMAP drafts folder.  This allows patches to be sent as
other email is when using mail clients that cannot read mailbox
files directly. The command also works with any general mailbox
in which emails have the fields "From", "Date", and "Subject" in
that order.</simpara>
<simpara>Typical usage is something like:</simpara>
<simpara>git format-patch --signoff --stdout --attach origin | git imap-send</simpara>
</simplesect>
<simplesect id="git-imap-send(1)__options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
-v
</term>
<term>
--verbose
</term>
<listitem>
<simpara>
        Be verbose.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-q
</term>
<term>
--quiet
</term>
<listitem>
<simpara>
        Be quiet.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--curl
</term>
<listitem>
<simpara>
        Use libcurl to communicate with the IMAP server, unless tunneling
        into it.  Ignored if Git was built without the USE_CURL_FOR_IMAP_SEND
        option set.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-curl
</term>
<listitem>
<simpara>
        Talk to the IMAP server using git's own IMAP routines instead of
        using libcurl.  Ignored if Git was built with the NO_OPENSSL option
        set.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-imap-send(1)__configuration">
<title>CONFIGURATION</title>
<simpara>To use the tool, <emphasis>imap.folder</emphasis> and either <emphasis>imap.tunnel</emphasis> or <emphasis>imap.host</emphasis> must be set
to appropriate values.</simpara>
<simpara>Everything above this line in this section isn't included from the
<xref linkend="git-config(1)" /> documentation. The content that follows is the
same as what's found there:</simpara>
<variablelist>
<varlistentry>
<term>
imap.folder
</term>
<listitem>
<simpara>
        The folder to drop the mails into, which is typically the Drafts
        folder. For example: "INBOX.Drafts", "INBOX/Drafts" or
        "[Gmail]/Drafts". Required.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
imap.tunnel
</term>
<listitem>
<simpara>
        Command used to set up a tunnel to the IMAP server through which
        commands will be piped instead of using a direct network connection
        to the server. Required when imap.host is not set.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
imap.host
</term>
<listitem>
<simpara>
        A URL identifying the server. Use an <emphasis>imap://</emphasis> prefix for non-secure
        connections and an <emphasis>imaps://</emphasis> prefix for secure connections.
        Ignored when imap.tunnel is set, but required otherwise.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
imap.user
</term>
<listitem>
<simpara>
        The username to use when logging in to the server.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
imap.pass
</term>
<listitem>
<simpara>
        The password to use when logging in to the server.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
imap.port
</term>
<listitem>
<simpara>
        An integer port number to connect to on the server.
        Defaults to 143 for imap:// hosts and 993 for imaps:// hosts.
        Ignored when imap.tunnel is set.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
imap.sslverify
</term>
<listitem>
<simpara>
        A boolean to enable/disable verification of the server certificate
        used by the SSL/TLS connection. Default is <emphasis>true</emphasis>. Ignored when
        imap.tunnel is set.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
imap.preformattedHTML
</term>
<listitem>
<simpara>
        A boolean to enable/disable the use of html encoding when sending
        a patch.  An html encoded patch will be bracketed with &lt;pre&gt;
        and have a content type of text/html.  Ironically, enabling this
        option causes Thunderbird to send the patch as a plain/text,
        format=fixed email.  Default is <emphasis>false</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
imap.authMethod
</term>
<listitem>
<simpara>
        Specify the authentication method for authenticating with the IMAP server.
        If Git was built with the NO_CURL option, or if your curl version is older
        than 7.34.0, or if you're running git-imap-send with the <emphasis>--no-curl</emphasis>
        option, the only supported method is <emphasis>CRAM-MD5</emphasis>. If this is not set
        then <emphasis>git imap-send</emphasis> uses the basic IMAP plaintext LOGIN command.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-imap-send(1)__examples">
<title>EXAMPLES</title>
<simpara>Using tunnel mode:</simpara>
<literallayout class="monospaced">[imap]
    folder = "INBOX.Drafts"
    tunnel = "ssh -q -C user@example.com /usr/bin/imapd ./Maildir 2&gt; /dev/null"</literallayout>
<simpara>Using direct mode:</simpara>
<literallayout class="monospaced">[imap]
    folder = "INBOX.Drafts"
    host = imap://imap.example.com
    user = bob
    pass = p4ssw0rd</literallayout>
<simpara>Using direct mode with SSL:</simpara>
<literallayout class="monospaced">[imap]
    folder = "INBOX.Drafts"
    host = imaps://imap.example.com
    user = bob
    pass = p4ssw0rd
    port = 123
    ; sslVerify = false</literallayout>
<note><simpara>You may want to use <emphasis>sslVerify=false</emphasis>
while troubleshooting, if you suspect that the reason you are
having trouble connecting is because the certificate you use at
the private server <emphasis>example.com</emphasis> you are trying to set up (or
have set up) may not be verified correctly.</simpara></note>
<simpara>Using Gmail's IMAP interface:</simpara>
<screen>[imap]
        folder = "[Gmail]/Drafts"
        host = imaps://imap.gmail.com
        user = user@gmail.com
        port = 993</screen>
<note><simpara>You might need to instead use: <emphasis>folder = "[Google Mail]/Drafts"</emphasis> if you get an error
that the "Folder doesn't exist".</simpara></note>
<note><simpara>If your Gmail account is set to another language than English, the name of the "Drafts"
folder will be localized.</simpara></note>
<simpara>Once the commits are ready to be sent, run the following command:</simpara>
<literallayout class="monospaced">$ git format-patch --cover-letter -M --stdout origin/master | git imap-send</literallayout>
<simpara>Just make sure to disable line wrapping in the email client (Gmail's web
interface will wrap lines no matter what, so you need to use a real
IMAP client).</simpara>
</simplesect>
<simplesect id="git-imap-send(1)__caution">
<title>CAUTION</title>
<simpara>It is still your responsibility to make sure that the email message
sent by your email program meets the standards of your project.
Many projects do not like patches to be attached.  Some mail
agents will transform patches (e.g. wrap lines, send them as
format=flowed) in ways that make them fail.  You will get angry
flames ridiculing you if you don't check this.</simpara>
<simpara>Thunderbird in particular is known to be problematic.  Thunderbird
users may wish to visit this web page for more information:
  <ulink url="https://kb.mozillazine.org/Plain_text_e-mail_-_Thunderbird#Completely_plain_email">https://kb.mozillazine.org/Plain_text_e-mail_-_Thunderbird#Completely_plain_email</ulink></simpara>
</simplesect>
<simplesect id="git-imap-send(1)__see_also">
<title>SEE ALSO</title>
<simpara><xref linkend="git-format-patch(1)" />, <xref linkend="git-send-email(1)" />, mbox(5)</simpara>
</simplesect>
<simplesect id="git-imap-send(1)__git">
<title>GIT</title>
<simpara>Part of the <xref linkend="git(1)" /> suite</simpara>
</simplesect>
</sect2>
