<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect2 SYSTEM "../../../dtd/dblite.dtd">

<sect2 lang="en" id="gitformat-commit-graph(5)">
    <title>gitformat-commit-graph(5)</title>
    <date>2024-07-02</date>
<revhistory><revision><date>2024-07-02</date></revision></revhistory>
<indexterm>
<primary>gitformat-commit-graph(5)</primary>
</indexterm>
<simplesect id="gitformat-commit-graph(5)__name">
<title>NAME</title>
<simpara>gitformat-commit-graph - Git commit-graph format</simpara>
</simplesect>
<simplesect id="gitformat-commit-graph(5)__synopsis">
<title>SYNOPSIS</title>
<blockquote>
<literallayout>$GIT_DIR/objects/info/commit-graph
$GIT_DIR/objects/info/commit-graphs/*</literallayout>
</blockquote>
</simplesect>
<simplesect id="gitformat-commit-graph(5)__description">
<title>DESCRIPTION</title>
<simpara>The Git commit-graph stores a list of commit OIDs and some associated
metadata, including:</simpara>
<itemizedlist>
<listitem>
<simpara>
The generation number of the commit.
</simpara>
</listitem>
<listitem>
<simpara>
The root tree OID.
</simpara>
</listitem>
<listitem>
<simpara>
The commit date.
</simpara>
</listitem>
<listitem>
<simpara>
The parents of the commit, stored using positional references within
  the graph file.
</simpara>
</listitem>
<listitem>
<simpara>
The Bloom filter of the commit carrying the paths that were changed between
  the commit and its first parent, if requested.
</simpara>
</listitem>
</itemizedlist>
<simpara>These positional references are stored as unsigned 32-bit integers
corresponding to the array position within the list of commit OIDs. Due
to some special constants we use to track parents, we can store at most
(1 &lt;&lt; 30) + (1 &lt;&lt; 29) + (1 &lt;&lt; 28) - 1 (around 1.8 billion) commits.</simpara>
</simplesect>
<simplesect id="gitformat-commit-graph(5)__commit_graph_files_have_the_following_format">
<title>Commit-graph files have the following format:</title>
<simpara>In order to allow extensions that add extra data to the graph, we organize
the body into "chunks" and provide a binary lookup table at the beginning
of the body. The header includes certain values, such as number of chunks
and hash type.</simpara>
<simpara>All multi-byte numbers are in network byte order.</simpara>
<section id="gitformat-commit-graph(5)__header">
<title>HEADER:</title>
<literallayout class="monospaced">4-byte signature:
    The signature is: {'C', 'G', 'P', 'H'}</literallayout>
<literallayout class="monospaced">1-byte version number:
    Currently, the only valid version is 1.</literallayout>
<literallayout class="monospaced">1-byte Hash Version
    We infer the hash length (H) from this value:
      1 =&gt; SHA-1
      2 =&gt; SHA-256
    If the hash type does not match the repository's hash algorithm, the
    commit-graph file should be ignored with a warning presented to the
    user.</literallayout>
<literallayout class="monospaced">1-byte number (C) of "chunks"</literallayout>
<literallayout class="monospaced">1-byte number (B) of base commit-graphs
    We infer the length (H*B) of the Base Graphs chunk
    from this value.</literallayout>
</section>
<section id="gitformat-commit-graph(5)__chunk_lookup">
<title>CHUNK LOOKUP:</title>
<literallayout class="monospaced">(C + 1) * 12 bytes listing the table of contents for the chunks:
    First 4 bytes describe the chunk id. Value 0 is a terminating label.
    Other 8 bytes provide the byte-offset in current file for chunk to
    start. (Chunks are ordered contiguously in the file, so you can infer
    the length using the next chunk position if necessary.) Each chunk
    ID appears at most once.</literallayout>
<literallayout class="monospaced">The CHUNK LOOKUP matches the table of contents from
the chunk-based file format, see linkgit:gitformat-chunk[5]</literallayout>
<literallayout class="monospaced">The remaining data in the body is described one chunk at a time, and
these chunks may be given in any order. Chunks are required unless
otherwise specified.</literallayout>
</section>
<section id="gitformat-commit-graph(5)__chunk_data">
<title>CHUNK DATA:</title>
<section id="gitformat-commit-graph(5)__oid_fanout_id_emphasis_o_emphasis_emphasis_i_emphasis_emphasis_d_emphasis_emphasis_f_emphasis_256_4_bytes">
<title>OID Fanout (ID: {<emphasis>O</emphasis>, <emphasis>I</emphasis>, <emphasis>D</emphasis>, <emphasis>F</emphasis>}) (256 * 4 bytes)</title>
<literallayout class="monospaced">The ith entry, F[i], stores the number of OIDs with first
byte at most i. Thus F[255] stores the total
number of commits (N).</literallayout>
</section>
<section id="gitformat-commit-graph(5)__oid_lookup_id_emphasis_o_emphasis_emphasis_i_emphasis_emphasis_d_emphasis_emphasis_l_emphasis_n_h_bytes">
<title>OID Lookup (ID: {<emphasis>O</emphasis>, <emphasis>I</emphasis>, <emphasis>D</emphasis>, <emphasis>L</emphasis>}) (N * H bytes)</title>
<literallayout class="monospaced">The OIDs for all commits in the graph, sorted in ascending order.</literallayout>
</section>
<section id="gitformat-commit-graph(5)__commit_data_id_emphasis_c_emphasis_emphasis_d_emphasis_emphasis_a_emphasis_emphasis_t_emphasis_n_h_16_bytes">
<title>Commit Data (ID: {<emphasis>C</emphasis>, <emphasis>D</emphasis>, <emphasis>A</emphasis>, <emphasis>T</emphasis> }) (N * (H + 16) bytes)</title>
<itemizedlist>
<listitem>
<simpara>
The first H bytes are for the OID of the root tree.
</simpara>
</listitem>
<listitem>
<simpara>
The next 8 bytes are for the positions of the first two parents
      of the ith commit. Stores value 0x70000000 if no parent in that
      position. If there are more than two parents, the second value
      has its most-significant bit on and the other bits store an array
      position into the Extra Edge List chunk.
</simpara>
</listitem>
<listitem>
<simpara>
The next 8 bytes store the topological level (generation number v1)
      of the commit and
      the commit time in seconds since EPOCH. The generation number
      uses the higher 30 bits of the first 4 bytes, while the commit
      time uses the 32 bits of the second 4 bytes, along with the lowest
      2 bits of the lowest byte, storing the 33rd and 34th bit of the
      commit time.
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="gitformat-commit-graph(5)__generation_data_id_emphasis_g_emphasis_emphasis_d_emphasis_emphasis_a_emphasis_emphasis_2_emphasis_n_4_bytes_optional">
<title>Generation Data (ID: {<emphasis>G</emphasis>, <emphasis>D</emphasis>, <emphasis>A</emphasis>, <emphasis>2</emphasis> }) (N * 4 bytes) [Optional]</title>
<itemizedlist>
<listitem>
<simpara>
This list of 4-byte values store corrected commit date offsets for the
      commits, arranged in the same order as commit data chunk.
</simpara>
</listitem>
<listitem>
<simpara>
If the corrected commit date offset cannot be stored within 31 bits,
      the value has its most-significant bit on and the other bits store
      the position of corrected commit date into the Generation Data Overflow
      chunk.
</simpara>
</listitem>
<listitem>
<simpara>
Generation Data chunk is present only when commit-graph file is written
      by compatible versions of Git and in case of split commit-graph chains,
      the topmost layer also has Generation Data chunk.
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="gitformat-commit-graph(5)__generation_data_overflow_id_emphasis_g_emphasis_emphasis_d_emphasis_emphasis_o_emphasis_emphasis_2_emphasis_optional">
<title>Generation Data Overflow (ID: {<emphasis>G</emphasis>, <emphasis>D</emphasis>, <emphasis>O</emphasis>, <emphasis>2</emphasis> }) [Optional]</title>
<itemizedlist>
<listitem>
<simpara>
This list of 8-byte values stores the corrected commit date offsets
      for commits with corrected commit date offsets that cannot be
      stored within 31 bits.
</simpara>
</listitem>
<listitem>
<simpara>
Generation Data Overflow chunk is present only when Generation Data
      chunk is present and atleast one corrected commit date offset cannot
      be stored within 31 bits.
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="gitformat-commit-graph(5)__extra_edge_list_id_emphasis_e_emphasis_emphasis_d_emphasis_emphasis_g_emphasis_emphasis_e_emphasis_optional">
<title>Extra Edge List (ID: {<emphasis>E</emphasis>, <emphasis>D</emphasis>, <emphasis>G</emphasis>, <emphasis>E</emphasis>}) [Optional]</title>
<literallayout class="monospaced">This list of 4-byte values store the second through nth parents for
all octopus merges. The second parent value in the commit data stores
an array position within this list along with the most-significant bit
on. Starting at that array position, iterate through this list of commit
positions for the parents until reaching a value with the most-significant
bit on. The other bits correspond to the position of the last parent.</literallayout>
</section>
<section id="gitformat-commit-graph(5)__bloom_filter_index_id_emphasis_b_emphasis_emphasis_i_emphasis_emphasis_d_emphasis_emphasis_x_emphasis_n_4_bytes_optional">
<title>Bloom Filter Index (ID: {<emphasis>B</emphasis>, <emphasis>I</emphasis>, <emphasis>D</emphasis>, <emphasis>X</emphasis>}) (N * 4 bytes) [Optional]</title>
<itemizedlist>
<listitem>
<simpara>
The ith entry, BIDX[i], stores the number of bytes in all Bloom filters
      from commit 0 to commit i (inclusive) in lexicographic order. The Bloom
      filter for the i-th commit spans from BIDX[i-1] to BIDX[i] (plus header
      length), where BIDX[-1] is 0.
</simpara>
</listitem>
<listitem>
<simpara>
The BIDX chunk is ignored if the BDAT chunk is not present.
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="gitformat-commit-graph(5)__bloom_filter_data_id_emphasis_b_emphasis_emphasis_d_emphasis_emphasis_a_emphasis_emphasis_t_emphasis_optional">
<title>Bloom Filter Data (ID: {<emphasis>B</emphasis>, <emphasis>D</emphasis>, <emphasis>A</emphasis>, <emphasis>T</emphasis>}) [Optional]</title>
<itemizedlist>
<listitem>
<simpara>
It starts with header consisting of three unsigned 32-bit integers:
</simpara>
<itemizedlist>
<listitem>
<simpara>
Version of the hash algorithm being used. We currently only support
        value 1 which corresponds to the 32-bit version of the murmur3 hash
        implemented exactly as described in
        <ulink url="https://en.wikipedia.org/wiki/MurmurHash#Algorithm">https://en.wikipedia.org/wiki/MurmurHash#Algorithm</ulink> and the double
        hashing technique using seed values 0x293ae76f and 0x7e646e2 as
        described in <ulink url="https://doi.org/10.1007/978-3-540-30494-4_26">https://doi.org/10.1007/978-3-540-30494-4_26</ulink> "Bloom Filters
        in Probabilistic Verification"
</simpara>
</listitem>
<listitem>
<simpara>
The number of times a path is hashed and hence the number of bit positions
              that cumulatively determine whether a file is present in the commit.
</simpara>
</listitem>
<listitem>
<simpara>
The minimum number of bits <emphasis>b</emphasis> per entry in the Bloom filter. If the filter
              contains <emphasis>n</emphasis> entries, then the filter size is the minimum number of 64-bit
              words that contain n*b bits.
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
The rest of the chunk is the concatenation of all the computed Bloom
      filters for the commits in lexicographic order.
</simpara>
</listitem>
<listitem>
<simpara>
Note: Commits with no changes or more than 512 changes have Bloom filters
      of length one, with either all bits set to zero or one respectively.
</simpara>
</listitem>
<listitem>
<simpara>
The BDAT chunk is present if and only if BIDX is present.
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="gitformat-commit-graph(5)__base_graphs_list_id_emphasis_b_emphasis_emphasis_a_emphasis_emphasis_s_emphasis_emphasis_e_emphasis_optional">
<title>Base Graphs List (ID: {<emphasis>B</emphasis>, <emphasis>A</emphasis>, <emphasis>S</emphasis>, <emphasis>E</emphasis>}) [Optional]</title>
<literallayout class="monospaced">This list of H-byte hashes describe a set of B commit-graph files that
form a commit-graph chain. The graph position for the ith commit in this
file's OID Lookup chunk is equal to i plus the number of commits in all
base graphs.  If B is non-zero, this chunk must exist.</literallayout>
</section>
</section>
<section id="gitformat-commit-graph(5)__trailer">
<title>TRAILER:</title>
<literallayout class="monospaced">H-byte HASH-checksum of all of the above.</literallayout>
</section>
</simplesect>
<simplesect id="gitformat-commit-graph(5)__historical_notes">
<title>Historical Notes:</title>
<simpara>The Generation Data (GDA2) and Generation Data Overflow (GDO2) chunks have
the number <emphasis>2</emphasis> in their chunk IDs because a previous version of Git wrote
possibly erroneous data in these chunks with the IDs "GDAT" and "GDOV". By
changing the IDs, newer versions of Git will silently ignore those older
chunks and write the new information without trusting the incorrect data.</simpara>
</simplesect>
<simplesect id="gitformat-commit-graph(5)__git">
<title>GIT</title>
<simpara>Part of the <xref linkend="git(1)" /> suite</simpara>
</simplesect>
</sect2>
