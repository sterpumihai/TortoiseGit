<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect2 SYSTEM "../../../dtd/dblite.dtd">

<sect2 lang="en" id="git-credential(1)">
    <title>git-credential(1)</title>
    <date>2024-07-02</date>
<revhistory><revision><date>2024-07-02</date></revision></revhistory>
<indexterm>
<primary>git-credential(1)</primary>
</indexterm>
<simplesect id="git-credential(1)__name">
<title>NAME</title>
<simpara>git-credential - Retrieve and store user credentials</simpara>
</simplesect>
<simplesect id="git-credential(1)__synopsis">
<title>SYNOPSIS</title>
<screen>'git credential' (fill|approve|reject)</screen>
</simplesect>
<simplesect id="git-credential(1)__description">
<title>DESCRIPTION</title>
<simpara>Git has an internal interface for storing and retrieving credentials
from system-specific helpers, as well as prompting the user for
usernames and passwords. The git-credential command exposes this
interface to scripts which may want to retrieve, store, or prompt for
credentials in the same manner as Git. The design of this scriptable
interface models the internal C API; see credential.h for more
background on the concepts.</simpara>
<simpara>git-credential takes an "action" option on the command-line (one of
<emphasis>fill</emphasis>, <emphasis>approve</emphasis>, or <emphasis>reject</emphasis>) and reads a credential description
on stdin (see <link linkend="git-credential(1)_IOFMT">INPUT/OUTPUT FORMAT</link>).</simpara>
<simpara>If the action is <emphasis>fill</emphasis>, git-credential will attempt to add "username"
and "password" attributes to the description by reading config files,
by contacting any configured credential helpers, or by prompting the
user. The username and password attributes of the credential
description are then printed to stdout together with the attributes
already provided.</simpara>
<simpara>If the action is <emphasis>approve</emphasis>, git-credential will send the description
to any configured credential helpers, which may store the credential
for later use.</simpara>
<simpara>If the action is <emphasis>reject</emphasis>, git-credential will send the description to
any configured credential helpers, which may erase any stored
credentials matching the description.</simpara>
<simpara>If the action is <emphasis>approve</emphasis> or <emphasis>reject</emphasis>, no output should be emitted.</simpara>
</simplesect>
<simplesect id="git-credential(1)__typical_use_of_git_credential">
<title>TYPICAL USE OF GIT CREDENTIAL</title>
<simpara>An application using git-credential will typically use <emphasis>git
credential</emphasis> following these steps:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Generate a credential description based on the context.
</simpara>
<simpara>For example, if we want a password for
<emphasis>https://example.com/foo.git</emphasis>, we might generate the following
credential description (don't forget the blank line at the end; it
tells <emphasis>git credential</emphasis> that the application finished feeding all the
information it has):</simpara>
<literallayout class="monospaced">protocol=https
host=example.com
path=foo.git</literallayout>
</listitem>
<listitem>
<simpara>
Ask git-credential to give us a username and password for this
     description. This is done by running <emphasis>git credential fill</emphasis>,
     feeding the description from step (1) to its standard input. The complete
     credential description (including the credential per se, i.e. the
     login and password) will be produced on standard output, like:
</simpara>
<literallayout class="monospaced">protocol=https
host=example.com
username=bob
password=secr3t</literallayout>
<simpara>In most cases, this means the attributes given in the input will be
repeated in the output, but Git may also modify the credential
description, for example by removing the <emphasis>path</emphasis> attribute when the
protocol is HTTP(s) and <emphasis>credential.useHttpPath</emphasis> is false.</simpara>
<simpara>If the <emphasis>git credential</emphasis> knew about the password, this step may
not have involved the user actually typing this password (the
user may have typed a password to unlock the keychain instead,
or no user interaction was done if the keychain was already
unlocked) before it returned <emphasis>password=secr3t</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>
Use the credential (e.g., access the URL with the username and
     password from step (2)), and see if it's accepted.
</simpara>
</listitem>
<listitem>
<simpara>
Report on the success or failure of the password. If the
     credential allowed the operation to complete successfully, then
     it can be marked with an "approve" action to tell <emphasis>git
     credential</emphasis> to reuse it in its next invocation. If the credential
     was rejected during the operation, use the "reject" action so
     that <emphasis>git credential</emphasis> will ask for a new password in its next
     invocation. In either case, <emphasis>git credential</emphasis> should be fed with
     the credential description obtained from step (2) (which also
     contains the fields provided in step (1)).
</simpara>
</listitem>
</orderedlist>
</simplesect>
<simplesect id="git-credential(1)_IOFMT">
<title>INPUT/OUTPUT FORMAT</title>
<simpara><emphasis>git credential</emphasis> reads and/or writes (depending on the action used)
credential information in its standard input/output. This information
can correspond either to keys for which <emphasis>git credential</emphasis> will obtain
the login information (e.g. host, protocol, path), or to the actual
credential data to be obtained (username/password).</simpara>
<simpara>The credential is split into a set of named attributes, with one
attribute per line. Each attribute is specified by a key-value pair,
separated by an <emphasis>=</emphasis> (equals) sign, followed by a newline.</simpara>
<simpara>The key may contain any bytes except <emphasis>=</emphasis>, newline, or NUL. The value may
contain any bytes except newline or NUL.</simpara>
<simpara>Attributes with keys that end with C-style array brackets <emphasis>[]</emphasis> can have
multiple values. Each instance of a multi-valued attribute forms an
ordered list of values - the order of the repeated attributes defines
the order of the values. An empty multi-valued attribute (<emphasis>key[]=\n</emphasis>)
acts to clear any previous entries and reset the list.</simpara>
<simpara>In all cases, all bytes are treated as-is (i.e., there is no quoting,
and one cannot transmit a value with newline or NUL in it). The list of
attributes is terminated by a blank line or end-of-file.</simpara>
<simpara>Git understands the following attributes:</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>protocol</emphasis>
</term>
<listitem>
<simpara>
        The protocol over which the credential will be used (e.g.,
        <emphasis>https</emphasis>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>host</emphasis>
</term>
<listitem>
<simpara>
        The remote hostname for a network credential.  This includes
        the port number if one was specified (e.g., "example.com:8088").
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>path</emphasis>
</term>
<listitem>
<simpara>
        The path with which the credential will be used. E.g., for
        accessing a remote https repository, this will be the
        repository's path on the server.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>username</emphasis>
</term>
<listitem>
<simpara>
        The credential's username, if we already have one (e.g., from a
        URL, the configuration, the user, or from a previously run helper).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>password</emphasis>
</term>
<listitem>
<simpara>
        The credential's password, if we are asking it to be stored.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>password_expiry_utc</emphasis>
</term>
<listitem>
<simpara>
        Generated passwords such as an OAuth access token may have an expiry date.
        When reading credentials from helpers, <emphasis>git credential fill</emphasis> ignores expired
        passwords. Represented as Unix time UTC, seconds since 1970.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>oauth_refresh_token</emphasis>
</term>
<listitem>
<simpara>
        An OAuth refresh token may accompany a password that is an OAuth access
        token. Helpers must treat this attribute as confidential like the password
        attribute. Git itself has no special behaviour for this attribute.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>url</emphasis>
</term>
<listitem>
<simpara>
        When this special attribute is read by <emphasis>git credential</emphasis>, the
        value is parsed as a URL and treated as if its constituent parts
        were read (e.g., <emphasis>url=https://example.com</emphasis> would behave as if
        <emphasis>protocol=https</emphasis> and <emphasis>host=example.com</emphasis> had been provided). This
        can help callers avoid parsing URLs themselves.
</simpara>
<simpara>Note that specifying a protocol is mandatory and if the URL
doesn't specify a hostname (e.g., "cert:///path/to/file") the
credential will contain a hostname attribute whose value is an
empty string.</simpara>
<simpara>Components which are missing from the URL (e.g., there is no
username in the example above) will be left unset.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>wwwauth[]</emphasis>
</term>
<listitem>
<simpara>
        When an HTTP response is received by Git that includes one or more
        <emphasis>WWW-Authenticate</emphasis> authentication headers, these will be passed by Git
        to credential helpers.
</simpara>
<simpara>Each <emphasis>WWW-Authenticate</emphasis> header value is passed as a multi-valued
attribute <emphasis>wwwauth[]</emphasis>, where the order of the attributes is the same as
they appear in the HTTP response. This attribute is <emphasis>one-way</emphasis> from Git
to pass additional information to credential helpers.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Unrecognised attributes are silently discarded.</simpara>
</simplesect>
<simplesect id="git-credential(1)__git">
<title>GIT</title>
<simpara>Part of the <xref linkend="git(1)" /> suite</simpara>
</simplesect>
</sect2>
