<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect2 SYSTEM "../../../dtd/dblite.dtd">

<sect2 lang="en" id="git-update-index(1)">
    <title>git-update-index(1)</title>
    <date>2024-07-02</date>
<revhistory><revision><date>2024-07-02</date></revision></revhistory>
<indexterm>
<primary>git-update-index(1)</primary>
</indexterm>
<simplesect id="git-update-index(1)__name">
<title>NAME</title>
<simpara>git-update-index - Register file contents in the working tree to the index</simpara>
</simplesect>
<simplesect id="git-update-index(1)__synopsis">
<title>SYNOPSIS</title>
<blockquote>
<literallayout><emphasis>git update-index</emphasis>
             [--add] [--remove | --force-remove] [--replace]
             [--refresh] [-q] [--unmerged] [--ignore-missing]
             [(--cacheinfo &lt;mode&gt;,&lt;object&gt;,&lt;file&gt;)&#8230;]
             [--chmod=(+|-)x]
             [--[no-]assume-unchanged]
             [--[no-]skip-worktree]
             [--[no-]ignore-skip-worktree-entries]
             [--[no-]fsmonitor-valid]
             [--ignore-submodules]
             [--[no-]split-index]
             [--[no-|test-|force-]untracked-cache]
             [--[no-]fsmonitor]
             [--really-refresh] [--unresolve] [--again | -g]
             [--info-only] [--index-info]
             [-z] [--stdin] [--index-version &lt;n&gt;]
             [--show-index-version]
             [--verbose]
             [--] [&lt;file&gt;&#8230;]</literallayout>
</blockquote>
</simplesect>
<simplesect id="git-update-index(1)__description">
<title>DESCRIPTION</title>
<simpara>Modifies the index. Each file mentioned is updated into the index and
any <emphasis>unmerged</emphasis> or <emphasis>needs updating</emphasis> state is cleared.</simpara>
<simpara>See also <xref linkend="git-add(1)" /> for a more user-friendly way to do some of
the most common operations on the index.</simpara>
<simpara>The way <emphasis>git update-index</emphasis> handles files it is told about can be modified
using the various options:</simpara>
</simplesect>
<simplesect id="git-update-index(1)__options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
--add
</term>
<listitem>
<simpara>
        If a specified file isn't in the index already then it's
        added.
        Default behaviour is to ignore new files.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--remove
</term>
<listitem>
<simpara>
        If a specified file is in the index but is missing then it's
        removed.
        Default behavior is to ignore removed files.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--refresh
</term>
<listitem>
<simpara>
        Looks at the current index and checks to see if merges or
        updates are needed by checking stat() information.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-q
</term>
<listitem>
<simpara>
        Quiet.  If --refresh finds that the index needs an update, the
        default behavior is to error out.  This option makes
        <emphasis>git update-index</emphasis> continue anyway.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--ignore-submodules
</term>
<listitem>
<simpara>
        Do not try to update submodules.  This option is only respected
        when passed before --refresh.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--unmerged
</term>
<listitem>
<simpara>
        If --refresh finds unmerged changes in the index, the default
        behavior is to error out.  This option makes <emphasis>git update-index</emphasis>
        continue anyway.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--ignore-missing
</term>
<listitem>
<simpara>
        Ignores missing files during a --refresh
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--cacheinfo &lt;mode&gt;,&lt;object&gt;,&lt;path&gt;
</term>
<term>
--cacheinfo &lt;mode&gt; &lt;object&gt; &lt;path&gt;
</term>
<listitem>
<simpara>
        Directly insert the specified info into the index.  For
        backward compatibility, you can also give these three
        arguments as three separate parameters, but new users are
        encouraged to use a single-parameter form.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--index-info
</term>
<listitem>
<simpara>
        Read index information from stdin.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--chmod=(+|-)x
</term>
<listitem>
<simpara>
        Set the execute permissions on the updated files.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--[no-]assume-unchanged
</term>
<listitem>
<simpara>
        When this flag is specified, the object names recorded
        for the paths are not updated.  Instead, this option
        sets/unsets the "assume unchanged" bit for the
        paths.  When the "assume unchanged" bit is on, the user
        promises not to change the file and allows Git to assume
        that the working tree file matches what is recorded in
        the index.  If you want to change the working tree file,
        you need to unset the bit to tell Git.  This is
        sometimes helpful when working with a big project on a
        filesystem that has a very slow lstat(2) system call
        (e.g. cifs).
</simpara>
<simpara>Git will fail (gracefully) in case it needs to modify this file
in the index e.g. when merging in a commit;
thus, in case the assumed-untracked file is changed upstream,
you will need to handle the situation manually.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--really-refresh
</term>
<listitem>
<simpara>
        Like <emphasis>--refresh</emphasis>, but checks stat information unconditionally,
        without regard to the "assume unchanged" setting.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--[no-]skip-worktree
</term>
<listitem>
<simpara>
        When one of these flags is specified, the object names recorded
        for the paths are not updated. Instead, these options
        set and unset the "skip-worktree" bit for the paths. See
        section "Skip-worktree bit" below for more information.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--[no-]ignore-skip-worktree-entries
</term>
<listitem>
<simpara>
        Do not remove skip-worktree (AKA "index-only") entries even when
        the <emphasis>--remove</emphasis> option was specified.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--[no-]fsmonitor-valid
</term>
<listitem>
<simpara>
        When one of these flags is specified, the object names recorded
        for the paths are not updated. Instead, these options
        set and unset the "fsmonitor valid" bit for the paths. See
        section "File System Monitor" below for more information.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-g
</term>
<term>
--again
</term>
<listitem>
<simpara>
        Runs <emphasis>git update-index</emphasis> itself on the paths whose index
        entries are different from those of the <emphasis>HEAD</emphasis> commit.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--unresolve
</term>
<listitem>
<simpara>
        Restores the <emphasis>unmerged</emphasis> or <emphasis>needs updating</emphasis> state of a
        file during a merge if it was cleared by accident.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--info-only
</term>
<listitem>
<simpara>
        Do not create objects in the object database for all
        &lt;file&gt; arguments that follow this flag; just insert
        their object IDs into the index.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--force-remove
</term>
<listitem>
<simpara>
        Remove the file from the index even when the working directory
        still has such a file. (Implies --remove.)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--replace
</term>
<listitem>
<simpara>
        By default, when a file <emphasis>path</emphasis> exists in the index,
        <emphasis>git update-index</emphasis> refuses an attempt to add <emphasis>path/file</emphasis>.
        Similarly if a file <emphasis>path/file</emphasis> exists, a file <emphasis>path</emphasis>
        cannot be added.  With --replace flag, existing entries
        that conflict with the entry being added are
        automatically removed with warning messages.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--stdin
</term>
<listitem>
<simpara>
        Instead of taking a list of paths from the command line,
        read a list of paths from the standard input.  Paths are
        separated by LF (i.e. one path per line) by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--verbose
</term>
<listitem>
<simpara>
        Report what is being added and removed from the index.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--index-version &lt;n&gt;
</term>
<listitem>
<simpara>
        Write the resulting index out in the named on-disk format version.
        Supported versions are 2, 3, and 4. The current default version is 2
        or 3, depending on whether extra features are used, such as
        <emphasis>git add -N</emphasis>.  With <emphasis>--verbose</emphasis>, also report the version the index
        file uses before and after this command.
</simpara>
<simpara>Version 4 performs a simple pathname compression that reduces index
size by 30%-50% on large repositories, which results in faster load
time.  Git supports it since version 1.8.0, released in October 2012,
and support for it was added to libgit2 in 2016 and to JGit in 2020.
Older versions of this manual page called it "relatively young", but
it should be considered mature technology these days.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--show-index-version
</term>
<listitem>
<simpara>
        Report the index format version used by the on-disk index file.
        See <emphasis>--index-version</emphasis> above.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-z
</term>
<listitem>
<simpara>
        Only meaningful with <emphasis>--stdin</emphasis> or <emphasis>--index-info</emphasis>; paths are
        separated with NUL character instead of LF.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--split-index
</term>
<term>
--no-split-index
</term>
<listitem>
<simpara>
        Enable or disable split index mode. If split-index mode is
        already enabled and <emphasis>--split-index</emphasis> is given again, all
        changes in $GIT_DIR/index are pushed back to the shared index
        file.
</simpara>
<simpara>These options take effect whatever the value of the <emphasis>core.splitIndex</emphasis>
configuration variable (see <xref linkend="git-config(1)" />). But a warning is
emitted when the change goes against the configured value, as the
configured value will take effect next time the index is read and this
will remove the intended effect of the option.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--untracked-cache
</term>
<term>
--no-untracked-cache
</term>
<listitem>
<simpara>
        Enable or disable untracked cache feature. Please use
        <emphasis>--test-untracked-cache</emphasis> before enabling it.
</simpara>
<simpara>These options take effect whatever the value of the <emphasis>core.untrackedCache</emphasis>
configuration variable (see <xref linkend="git-config(1)" />). But a warning is
emitted when the change goes against the configured value, as the
configured value will take effect next time the index is read and this
will remove the intended effect of the option.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--test-untracked-cache
</term>
<listitem>
<simpara>
        Only perform tests on the working directory to make sure
        untracked cache can be used. You have to manually enable
        untracked cache using <emphasis>--untracked-cache</emphasis> or
        <emphasis>--force-untracked-cache</emphasis> or the <emphasis>core.untrackedCache</emphasis>
        configuration variable afterwards if you really want to use
        it. If a test fails the exit code is 1 and a message
        explains what is not working as needed, otherwise the exit
        code is 0 and OK is printed.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--force-untracked-cache
</term>
<listitem>
<simpara>
        Same as <emphasis>--untracked-cache</emphasis>. Provided for backwards
        compatibility with older versions of Git where
        <emphasis>--untracked-cache</emphasis> used to imply <emphasis>--test-untracked-cache</emphasis> but
        this option would enable the extension unconditionally.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--fsmonitor
</term>
<term>
--no-fsmonitor
</term>
<listitem>
<simpara>
        Enable or disable files system monitor feature. These options
        take effect whatever the value of the <emphasis>core.fsmonitor</emphasis>
        configuration variable (see <xref linkend="git-config(1)" />). But a warning
        is emitted when the change goes against the configured value, as
        the configured value will take effect next time the index is
        read and this will remove the intended effect of the option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--
</term>
<listitem>
<simpara>
        Do not interpret any more arguments as options.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
&lt;file&gt;
</term>
<listitem>
<simpara>
        Files to act on.
        Note that files beginning with <emphasis>.</emphasis> are discarded. This includes
        <emphasis>./file</emphasis> and <emphasis>dir/./file</emphasis>. If you don't want this, then use
        cleaner names.
        The same applies to directories ending <emphasis>/</emphasis> and paths with <emphasis>//</emphasis>
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-update-index(1)__using_refresh">
<title>USING --REFRESH</title>
<simpara><emphasis>--refresh</emphasis> does not calculate a new sha1 file or bring the index
up to date for mode/content changes. But what it <emphasis role="strong">does</emphasis> do is to
"re-match" the stat information of a file with the index, so that you
can refresh the index for a file that hasn't been changed but where
the stat entry is out of date.</simpara>
<simpara>For example, you'd want to do this after doing a <emphasis>git read-tree</emphasis>, to link
up the stat index details with the proper files.</simpara>
</simplesect>
<simplesect id="git-update-index(1)__using_cacheinfo_or_info_only">
<title>USING --CACHEINFO OR --INFO-ONLY</title>
<simpara><emphasis>--cacheinfo</emphasis> is used to register a file that is not in the
current working directory.  This is useful for minimum-checkout
merging.</simpara>
<simpara>To pretend you have a file at path with mode and sha1, say:</simpara>
<screen>$ git update-index --add --cacheinfo &lt;mode&gt;,&lt;sha1&gt;,&lt;path&gt;</screen>
<simpara><emphasis>--info-only</emphasis> is used to register files without placing them in the object
database.  This is useful for status-only repositories.</simpara>
<simpara>Both <emphasis>--cacheinfo</emphasis> and <emphasis>--info-only</emphasis> behave similarly: the index is updated
but the object database isn't.  <emphasis>--cacheinfo</emphasis> is useful when the object is
in the database but the file isn't available locally.  <emphasis>--info-only</emphasis> is
useful when the file is available, but you do not wish to update the
object database.</simpara>
</simplesect>
<simplesect id="git-update-index(1)__using_index_info">
<title>USING --INDEX-INFO</title>
<simpara><emphasis>--index-info</emphasis> is a more powerful mechanism that lets you feed
multiple entry definitions from the standard input, and designed
specifically for scripts.  It can take inputs of three formats:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
mode SP type SP sha1          TAB path
</simpara>
<simpara>This format is to stuff <emphasis>git ls-tree</emphasis> output into the index.</simpara>
</listitem>
<listitem>
<simpara>
mode         SP sha1 SP stage TAB path
</simpara>
<simpara>This format is to put higher order stages into the
index file and matches <emphasis>git ls-files --stage</emphasis> output.</simpara>
</listitem>
<listitem>
<simpara>
mode         SP sha1          TAB path
</simpara>
<simpara>This format is no longer produced by any Git command, but is
and will continue to be supported by <emphasis>update-index --index-info</emphasis>.</simpara>
</listitem>
</orderedlist>
<simpara>To place a higher stage entry to the index, the path should
first be removed by feeding a mode=0 entry for the path, and
then feeding necessary input lines in the third format.</simpara>
<simpara>For example, starting with this index:</simpara>
<screen>$ git ls-files -s
100644 8a1218a1024a212bb3db30becd860315f9f3ac52 0       frotz</screen>
<simpara>you can feed the following input to <emphasis>--index-info</emphasis>:</simpara>
<screen>$ git update-index --index-info
0 0000000000000000000000000000000000000000      frotz
100644 8a1218a1024a212bb3db30becd860315f9f3ac52 1       frotz
100755 8a1218a1024a212bb3db30becd860315f9f3ac52 2       frotz</screen>
<simpara>The first line of the input feeds 0 as the mode to remove the
path; the SHA-1 does not matter as long as it is well formatted.
Then the second and third line feeds stage 1 and stage 2 entries
for that path.  After the above, we would end up with this:</simpara>
<screen>$ git ls-files -s
100644 8a1218a1024a212bb3db30becd860315f9f3ac52 1       frotz
100755 8a1218a1024a212bb3db30becd860315f9f3ac52 2       frotz</screen>
</simplesect>
<simplesect id="git-update-index(1)__using_assume_unchanged_bit">
<title>USING ASSUME UNCHANGED BIT</title>
<simpara>Many operations in Git depend on your filesystem to have an
efficient <emphasis>lstat(2)</emphasis> implementation, so that <emphasis>st_mtime</emphasis>
information for working tree files can be cheaply checked to see
if the file contents have changed from the version recorded in
the index file.  Unfortunately, some filesystems have
inefficient <emphasis>lstat(2)</emphasis>.  If your filesystem is one of them, you
can set "assume unchanged" bit to paths you have not changed to
cause Git not to do this check.  Note that setting this bit on a
path does not mean Git will check the contents of the file to
see if it has changed -- it makes Git to omit any checking and
assume it has <emphasis role="strong">not</emphasis> changed.  When you make changes to working
tree files, you have to explicitly tell Git about it by dropping
"assume unchanged" bit, either before or after you modify them.</simpara>
<simpara>In order to set "assume unchanged" bit, use <emphasis>--assume-unchanged</emphasis>
option.  To unset, use <emphasis>--no-assume-unchanged</emphasis>. To see which files
have the "assume unchanged" bit set, use <emphasis>git ls-files -v</emphasis>
(see <xref linkend="git-ls-files(1)" />).</simpara>
<simpara>The command looks at <emphasis>core.ignorestat</emphasis> configuration variable.  When
this is true, paths updated with <emphasis>git update-index paths...</emphasis> and
paths updated with other Git commands that update both index and
working tree (e.g. <emphasis>git apply --index</emphasis>, <emphasis>git checkout-index -u</emphasis>,
and <emphasis>git read-tree -u</emphasis>) are automatically marked as "assume
unchanged".  Note that "assume unchanged" bit is <emphasis role="strong">not</emphasis> set if
<emphasis>git update-index --refresh</emphasis> finds the working tree file matches
the index (use <emphasis>git update-index --really-refresh</emphasis> if you want
to mark them as "assume unchanged").</simpara>
<simpara>Sometimes users confuse the assume-unchanged bit with the
skip-worktree bit.  See the final paragraph in the "Skip-worktree bit"
section below for an explanation of the differences.</simpara>
</simplesect>
<simplesect id="git-update-index(1)__examples">
<title>EXAMPLES</title>
<simpara>To update and refresh only the files already checked out:</simpara>
<screen>$ git checkout-index -n -f -a &amp;&amp; git update-index --ignore-missing --refresh</screen>
<variablelist>
<varlistentry>
<term>
On an inefficient filesystem with <emphasis>core.ignorestat</emphasis> set
</term>
<listitem>
<screen>$ git update-index --really-refresh              <co id="git-update-index_CO1-1"/>
$ git update-index --no-assume-unchanged foo.c   <co id="git-update-index_CO1-2"/>
$ git diff --name-only                           <co id="git-update-index_CO1-3"/>
$ edit foo.c
$ git diff --name-only                           <co id="git-update-index_CO1-4"/>
M foo.c
$ git update-index foo.c                         <co id="git-update-index_CO1-5"/>
$ git diff --name-only                           <co id="git-update-index_CO1-6"/>
$ edit foo.c
$ git diff --name-only                           <co id="git-update-index_CO1-7"/>
$ git update-index --no-assume-unchanged foo.c   <co id="git-update-index_CO1-8"/>
$ git diff --name-only                           <co id="git-update-index_CO1-9"/>
M foo.c</screen>
<calloutlist>
<callout arearefs="git-update-index_CO1-1">
<para>
forces lstat(2) to set "assume unchanged" bits for paths that match index.
</para>
</callout>
<callout arearefs="git-update-index_CO1-2">
<para>
mark the path to be edited.
</para>
</callout>
<callout arearefs="git-update-index_CO1-3">
<para>
this does lstat(2) and finds index matches the path.
</para>
</callout>
<callout arearefs="git-update-index_CO1-4">
<para>
this does lstat(2) and finds index does <emphasis role="strong">not</emphasis> match the path.
</para>
</callout>
<callout arearefs="git-update-index_CO1-5">
<para>
registering the new version to index sets "assume unchanged" bit.
</para>
</callout>
<callout arearefs="git-update-index_CO1-6">
<para>
and it is assumed unchanged.
</para>
</callout>
<callout arearefs="git-update-index_CO1-7">
<para>
even after you edit it.
</para>
</callout>
<callout arearefs="git-update-index_CO1-8">
<para>
you can tell about the change after the fact.
</para>
</callout>
<callout arearefs="git-update-index_CO1-9">
<para>
now it checks with lstat(2) and finds it has been changed.
</para>
</callout>
</calloutlist>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-update-index(1)__skip_worktree_bit">
<title>SKIP-WORKTREE BIT</title>
<simpara>Skip-worktree bit can be defined in one (long) sentence: Tell git to
avoid writing the file to the working directory when reasonably
possible, and treat the file as unchanged when it is not
present in the working directory.</simpara>
<simpara>Note that not all git commands will pay attention to this bit, and
some only partially support it.</simpara>
<simpara>The update-index flags and the read-tree capabilities relating to the
skip-worktree bit predated the introduction of the
<xref linkend="git-sparse-checkout(1)" /> command, which provides a much easier
way to configure and handle the skip-worktree bits.  If you want to
reduce your working tree to only deal with a subset of the files in
the repository, we strongly encourage the use of
<xref linkend="git-sparse-checkout(1)" /> in preference to the low-level
update-index and read-tree primitives.</simpara>
<simpara>The primary purpose of the skip-worktree bit is to enable sparse
checkouts, i.e. to have working directories with only a subset of
paths present.  When the skip-worktree bit is set, Git commands (such
as <emphasis>switch</emphasis>, <emphasis>pull</emphasis>, <emphasis>merge</emphasis>) will avoid writing these files.
However, these commands will sometimes write these files anyway in
important cases such as conflicts during a merge or rebase.  Git
commands will also avoid treating the lack of such files as an
intentional deletion; for example <emphasis>git add -u</emphasis> will not stage a
deletion for these files and <emphasis>git commit -a</emphasis> will not make a commit
deleting them either.</simpara>
<simpara>Although this bit looks similar to assume-unchanged bit, its goal is
different.  The assume-unchanged bit is for leaving the file in the
working tree but having Git omit checking it for changes and presuming
that the file has not been changed (though if it can determine without
stat'ing the file that it has changed, it is free to record the
changes).  skip-worktree tells Git to ignore the absence of the file,
avoid updating it when possible with commands that normally update
much of the working directory (e.g. <emphasis>checkout</emphasis>, <emphasis>switch</emphasis>, <emphasis>pull</emphasis>,
etc.), and not have its absence be recorded in commits.  Note that in
sparse checkouts (setup by <emphasis>git sparse-checkout</emphasis> or by configuring
core.sparseCheckout to true), if a file is marked as skip-worktree in
the index but is found in the working tree, Git will clear the
skip-worktree bit for that file.</simpara>
</simplesect>
<simplesect id="git-update-index(1)__split_index">
<title>SPLIT INDEX</title>
<simpara>This mode is designed for repositories with very large indexes, and
aims at reducing the time it takes to repeatedly write these indexes.</simpara>
<simpara>In this mode, the index is split into two files, $GIT_DIR/index and
$GIT_DIR/sharedindex.&lt;SHA-1&gt;. Changes are accumulated in
$GIT_DIR/index, the split index, while the shared index file contains
all index entries and stays unchanged.</simpara>
<simpara>All changes in the split index are pushed back to the shared index
file when the number of entries in the split index reaches a level
specified by the splitIndex.maxPercentChange config variable (see
<xref linkend="git-config(1)" />).</simpara>
<simpara>Each time a new shared index file is created, the old shared index
files are deleted if their modification time is older than what is
specified by the splitIndex.sharedIndexExpire config variable (see
<xref linkend="git-config(1)" />).</simpara>
<simpara>To avoid deleting a shared index file that is still used, its
modification time is updated to the current time every time a new split
index based on the shared index file is either created or read from.</simpara>
</simplesect>
<simplesect id="git-update-index(1)__untracked_cache">
<title>UNTRACKED CACHE</title>
<simpara>This cache is meant to speed up commands that involve determining
untracked files such as <emphasis>git status</emphasis>.</simpara>
<simpara>This feature works by recording the mtime of the working tree
directories and then omitting reading directories and stat calls
against files in those directories whose mtime hasn't changed. For
this to work the underlying operating system and file system must
change the <emphasis>st_mtime</emphasis> field of directories if files in the directory
are added, modified or deleted.</simpara>
<simpara>You can test whether the filesystem supports that with the
<emphasis>--test-untracked-cache</emphasis> option. The <emphasis>--untracked-cache</emphasis> option used
to implicitly perform that test in older versions of Git, but that's
no longer the case.</simpara>
<simpara>If you want to enable (or disable) this feature, it is easier to use
the <emphasis>core.untrackedCache</emphasis> configuration variable (see
<xref linkend="git-config(1)" />) than using the <emphasis>--untracked-cache</emphasis> option to
<emphasis>git update-index</emphasis> in each repository, especially if you want to do so
across all repositories you use, because you can set the configuration
variable to <emphasis>true</emphasis> (or <emphasis>false</emphasis>) in your <emphasis>$HOME/.gitconfig</emphasis> just once
and have it affect all repositories you touch.</simpara>
<simpara>When the <emphasis>core.untrackedCache</emphasis> configuration variable is changed, the
untracked cache is added to or removed from the index the next time a
command reads the index; while when <emphasis>--[no-|force-]untracked-cache</emphasis>
are used, the untracked cache is immediately added to or removed from
the index.</simpara>
<simpara>Before 2.17, the untracked cache had a bug where replacing a directory
with a symlink to another directory could cause it to incorrectly show
files tracked by git as untracked. See the "status: add a failing test
showing a core.untrackedCache bug" commit to git.git. A workaround for
that is (and this might work for other undiscovered bugs in the
future):</simpara>
<screen>$ git -c core.untrackedCache=false status</screen>
<simpara>This bug has also been shown to affect non-symlink cases of replacing
a directory with a file when it comes to the internal structures of
the untracked cache, but no case has been reported where this resulted in
wrong "git status" output.</simpara>
<simpara>There are also cases where existing indexes written by git versions
before 2.17 will reference directories that don't exist anymore,
potentially causing many "could not open directory" warnings to be
printed on "git status". These are new warnings for existing issues
that were previously silently discarded.</simpara>
<simpara>As with the bug described above the solution is to one-off do a "git
status" run with <emphasis>core.untrackedCache=false</emphasis> to flush out the leftover
bad data.</simpara>
</simplesect>
<simplesect id="git-update-index(1)__file_system_monitor">
<title>FILE SYSTEM MONITOR</title>
<simpara>This feature is intended to speed up git operations for repos that have
large working directories.</simpara>
<simpara>It enables git to work together with a file system monitor (see
<xref linkend="git-fsmonitor&#45;&#45;daemon(1)" />
and the
"fsmonitor-watchman" section of <xref linkend="githooks(5)" />) that can
inform it as to what files have been modified. This enables git to avoid
having to lstat() every file to find modified files.</simpara>
<simpara>When used in conjunction with the untracked cache, it can further improve
performance by avoiding the cost of scanning the entire working directory
looking for new files.</simpara>
<simpara>If you want to enable (or disable) this feature, it is easier to use
the <emphasis>core.fsmonitor</emphasis> configuration variable (see
<xref linkend="git-config(1)" />) than using the <emphasis>--fsmonitor</emphasis> option to <emphasis>git
update-index</emphasis> in each repository, especially if you want to do so
across all repositories you use, because you can set the configuration
variable in your <emphasis>$HOME/.gitconfig</emphasis> just once and have it affect all
repositories you touch.</simpara>
<simpara>When the <emphasis>core.fsmonitor</emphasis> configuration variable is changed, the
file system monitor is added to or removed from the index the next time
a command reads the index. When <emphasis>--[no-]fsmonitor</emphasis> are used, the file
system monitor is immediately added to or removed from the index.</simpara>
</simplesect>
<simplesect id="git-update-index(1)__configuration">
<title>CONFIGURATION</title>
<simpara>The command honors <emphasis>core.filemode</emphasis> configuration variable.  If
your repository is on a filesystem whose executable bits are
unreliable, this should be set to <emphasis>false</emphasis> (see <xref linkend="git-config(1)" />).
This causes the command to ignore differences in file modes recorded
in the index and the file mode on the filesystem if they differ only on
executable bit.   On such an unfortunate filesystem, you may
need to use <emphasis>git update-index --chmod=</emphasis>.</simpara>
<simpara>Quite similarly, if <emphasis>core.symlinks</emphasis> configuration variable is set
to <emphasis>false</emphasis> (see <xref linkend="git-config(1)" />), symbolic links are checked out
as plain files, and this command does not modify a recorded file mode
from symbolic link to regular file.</simpara>
<simpara>The command looks at <emphasis>core.ignorestat</emphasis> configuration variable.  See
<emphasis>Using "assume unchanged" bit</emphasis> section above.</simpara>
<simpara>The command also looks at <emphasis>core.trustctime</emphasis> configuration variable.
It can be useful when the inode change time is regularly modified by
something outside Git (file system crawlers and backup systems use
ctime for marking files processed) (see <xref linkend="git-config(1)" />).</simpara>
<simpara>The untracked cache extension can be enabled by the
<emphasis>core.untrackedCache</emphasis> configuration variable (see
<xref linkend="git-config(1)" />).</simpara>
</simplesect>
<simplesect id="git-update-index(1)__notes">
<title>NOTES</title>
<simpara>Users often try to use the assume-unchanged and skip-worktree bits
to tell Git to ignore changes to files that are tracked.  This does not
work as expected, since Git may still check working tree files against
the index when performing certain operations.  In general, Git does not
provide a way to ignore changes to tracked files, so alternate solutions
are recommended.</simpara>
<simpara>For example, if the file you want to change is some sort of config file,
the repository can include a sample config file that can then be copied
into the ignored name and modified.  The repository can even include a
script to treat the sample file as a template, modifying and copying it
automatically.</simpara>
</simplesect>
<simplesect id="git-update-index(1)__see_also">
<title>SEE ALSO</title>
<simpara><xref linkend="git-config(1)" />,
<xref linkend="git-add(1)" />,
<xref linkend="git-ls-files(1)" /></simpara>
</simplesect>
<simplesect id="git-update-index(1)__git">
<title>GIT</title>
<simpara>Part of the <xref linkend="git(1)" /> suite</simpara>
</simplesect>
</sect2>
