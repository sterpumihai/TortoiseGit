<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect2 SYSTEM "../../../dtd/dblite.dtd">

<sect2 lang="en" id="git-archive(1)">
    <title>git-archive(1)</title>
    <date>2024-07-02</date>
<revhistory><revision><date>2024-07-02</date></revision></revhistory>
<indexterm>
<primary>git-archive(1)</primary>
</indexterm>
<simplesect id="git-archive(1)__name">
<title>NAME</title>
<simpara>git-archive - Create an archive of files from a named tree</simpara>
</simplesect>
<simplesect id="git-archive(1)__synopsis">
<title>SYNOPSIS</title>
<blockquote>
<literallayout><emphasis>git archive</emphasis> [--format=&lt;fmt&gt;] [--list] [--prefix=&lt;prefix&gt;/] [&lt;extra&gt;]
              [-o &lt;file&gt; | --output=&lt;file&gt;] [--worktree-attributes]
              [--remote=&lt;repo&gt; [--exec=&lt;git-upload-archive&gt;]] &lt;tree-ish&gt;
              [&lt;path&gt;&#8230;]</literallayout>
</blockquote>
</simplesect>
<simplesect id="git-archive(1)__description">
<title>DESCRIPTION</title>
<simpara>Creates an archive of the specified format containing the tree
structure for the named tree, and writes it out to the standard
output.  If &lt;prefix&gt; is specified it is
prepended to the filenames in the archive.</simpara>
<simpara><emphasis>git archive</emphasis> behaves differently when given a tree ID as opposed to a
commit ID or tag ID. When a tree ID is provided, the current time is
used as the modification time of each file in the archive. On the
other hand, when a commit ID or tag ID is provided, the commit time as
recorded in the referenced commit object is used instead.
Additionally the commit ID is stored in a global extended pax header
if the tar format is used; it can be extracted using <emphasis>git
get-tar-commit-id</emphasis>. In ZIP files it is stored as a file comment.</simpara>
</simplesect>
<simplesect id="git-archive(1)__options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
--format=&lt;fmt&gt;
</term>
<listitem>
<simpara>
        Format of the resulting archive. Possible values are <emphasis>tar</emphasis>,
        <emphasis>zip</emphasis>, <emphasis>tar.gz</emphasis>, <emphasis>tgz</emphasis>, and any format defined using the
        configuration option <emphasis>tar.&lt;format&gt;.command</emphasis>. If <emphasis>--format</emphasis>
        is not given, and the output file is specified, the format is
        inferred from the filename if possible (e.g. writing to <emphasis>foo.zip</emphasis>
        makes the output to be in the <emphasis>zip</emphasis> format). Otherwise the output
        format is <emphasis>tar</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-l
</term>
<term>
--list
</term>
<listitem>
<simpara>
        Show all available formats.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-v
</term>
<term>
--verbose
</term>
<listitem>
<simpara>
        Report progress to stderr.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--prefix=&lt;prefix&gt;/
</term>
<listitem>
<simpara>
        Prepend &lt;prefix&gt;/ to paths in the archive.  Can be repeated; its
        rightmost value is used for all tracked files.  See below which
        value gets used by <emphasis>--add-file</emphasis> and <emphasis>--add-virtual-file</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-o &lt;file&gt;
</term>
<term>
--output=&lt;file&gt;
</term>
<listitem>
<simpara>
        Write the archive to &lt;file&gt; instead of stdout.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--add-file=&lt;file&gt;
</term>
<listitem>
<simpara>
        Add a non-tracked file to the archive.  Can be repeated to add
        multiple files.  The path of the file in the archive is built by
        concatenating the value of the last <emphasis>--prefix</emphasis> option (if any)
        before this <emphasis>--add-file</emphasis> and the basename of &lt;file&gt;.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--add-virtual-file=&lt;path&gt;:&lt;content&gt;
</term>
<listitem>
<simpara>
        Add the specified contents to the archive.  Can be repeated to add
        multiple files.  The path of the file in the archive is built
        by concatenating the value of the last <emphasis>--prefix</emphasis> option (if any)
        before this <emphasis>--add-virtual-file</emphasis> and <emphasis>&lt;path&gt;</emphasis>.
</simpara>
<simpara>The <emphasis>&lt;path&gt;</emphasis> argument can start and end with a literal double-quote
character; the contained file name is interpreted as a C-style string,
i.e. the backslash is interpreted as escape character. The path must
be quoted if it contains a colon, to avoid the colon from being
misinterpreted as the separator between the path and the contents, or
if the path begins or ends with a double-quote character.</simpara>
<simpara>The file mode is limited to a regular file, and the option may be
subject to platform-dependent command-line limits. For non-trivial
cases, write an untracked file and use <emphasis>--add-file</emphasis> instead.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--worktree-attributes
</term>
<listitem>
<simpara>
        Look for attributes in .gitattributes files in the working tree
        as well (see <xref linkend="git-archive(1)_ATTRIBUTES"/>).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--mtime=&lt;time&gt;
</term>
<listitem>
<simpara>
        Set modification time of archive entries.  Without this option
        the committer time is used if <emphasis>&lt;tree-ish&gt;</emphasis> is a commit or tag,
        and the current time if it is a tree.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
&lt;extra&gt;
</term>
<listitem>
<simpara>
        This can be any options that the archiver backend understands.
        See next section.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--remote=&lt;repo&gt;
</term>
<listitem>
<simpara>
        Instead of making a tar archive from the local repository,
        retrieve a tar archive from a remote repository. Note that the
        remote repository may place restrictions on which sha1
        expressions may be allowed in <emphasis>&lt;tree-ish&gt;</emphasis>. See
        <xref linkend="git-upload-archive(1)" /> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--exec=&lt;git-upload-archive&gt;
</term>
<listitem>
<simpara>
        Used with --remote to specify the path to the
        <emphasis>git-upload-archive</emphasis> on the remote side.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
&lt;tree-ish&gt;
</term>
<listitem>
<simpara>
        The tree or commit to produce an archive for.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
&lt;path&gt;
</term>
<listitem>
<simpara>
        Without an optional path parameter, all files and subdirectories
        of the current working directory are included in the archive.
        If one or more paths are specified, only these are included.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-archive(1)__backend_extra_options">
<title>BACKEND EXTRA OPTIONS</title>
<section id="git-archive(1)__zip">
<title>zip</title>
<variablelist>
<varlistentry>
<term>
-&lt;digit&gt;
</term>
<listitem>
<simpara>
        Specify compression level.  Larger values allow the command
        to spend more time to compress to smaller size.  Supported
        values are from <emphasis>-0</emphasis> (store-only) to <emphasis>-9</emphasis> (best ratio).
        Default is <emphasis>-6</emphasis> if not given.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="git-archive(1)__tar">
<title>tar</title>
<variablelist>
<varlistentry>
<term>
-&lt;number&gt;
</term>
<listitem>
<simpara>
        Specify compression level. The value will be passed to the
        compression command configured in <emphasis>tar.&lt;format&gt;.command</emphasis>. See
        manual page of the configured command for the list of supported
        levels and the default level if this option isn't specified.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</simplesect>
<simplesect id="git-archive(1)__configuration">
<title>CONFIGURATION</title>
<variablelist>
<varlistentry>
<term>
tar.umask
</term>
<listitem>
<simpara>
        This variable can be used to restrict the permission bits of
        tar archive entries.  The default is 0002, which turns off the
        world write bit.  The special value "user" indicates that the
        archiving user's umask will be used instead.  See umask(2) for
        details.  If <emphasis>--remote</emphasis> is used then only the configuration of
        the remote repository takes effect.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
tar.&lt;format&gt;.command
</term>
<listitem>
<simpara>
        This variable specifies a shell command through which the tar
        output generated by <emphasis>git archive</emphasis> should be piped. The command
        is executed using the shell with the generated tar file on its
        standard input, and should produce the final output on its
        standard output. Any compression-level options will be passed
        to the command (e.g., <emphasis>-9</emphasis>).
</simpara>
<simpara>The <emphasis>tar.gz</emphasis> and <emphasis>tgz</emphasis> formats are defined automatically and use the
magic command <emphasis>git archive gzip</emphasis> by default, which invokes an internal
implementation of gzip.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
tar.&lt;format&gt;.remote
</term>
<listitem>
<simpara>
        If true, enable the format for use by remote clients via
        <xref linkend="git-upload-archive(1)" />. Defaults to false for
        user-defined formats, but true for the <emphasis>tar.gz</emphasis> and <emphasis>tgz</emphasis>
        formats.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-archive(1)_ATTRIBUTES">
<title>ATTRIBUTES</title>
<variablelist>
<varlistentry>
<term>
export-ignore
</term>
<listitem>
<simpara>
        Files and directories with the attribute export-ignore won't be
        added to archive files.  See <xref linkend="gitattributes(5)" /> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
export-subst
</term>
<listitem>
<simpara>
        If the attribute export-subst is set for a file then Git will
        expand several placeholders when adding this file to an archive.
        See <xref linkend="gitattributes(5)" /> for details.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Note that attributes are by default taken from the <emphasis>.gitattributes</emphasis> files
in the tree that is being archived.  If you want to tweak the way the
output is generated after the fact (e.g. you committed without adding an
appropriate export-ignore in its <emphasis>.gitattributes</emphasis>), adjust the checked out
<emphasis>.gitattributes</emphasis> file as necessary and use <emphasis>--worktree-attributes</emphasis>
option.  Alternatively you can keep necessary attributes that should apply
while archiving any tree in your <emphasis>$GIT_DIR/info/attributes</emphasis> file.</simpara>
</simplesect>
<simplesect id="git-archive(1)__examples">
<title>EXAMPLES</title>
<variablelist>
<varlistentry>
<term>
<emphasis>git archive --format=tar --prefix=junk/ HEAD | (cd /var/tmp/ &amp;&amp; tar xf -)</emphasis>
</term>
<listitem>
<simpara>
        Create a tar archive that contains the contents of the
        latest commit on the current branch, and extract it in the
        <emphasis>/var/tmp/junk</emphasis> directory.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>git archive --format=tar --prefix=git-1.4.0/ v1.4.0 | gzip &gt;git-1.4.0.tar.gz</emphasis>
</term>
<listitem>
<simpara>
        Create a compressed tarball for v1.4.0 release.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>git archive --format=tar.gz --prefix=git-1.4.0/ v1.4.0 &gt;git-1.4.0.tar.gz</emphasis>
</term>
<listitem>
<simpara>
        Same as above, but using the builtin tar.gz handling.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>git archive --prefix=git-1.4.0/ -o git-1.4.0.tar.gz v1.4.0</emphasis>
</term>
<listitem>
<simpara>
        Same as above, but the format is inferred from the output file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>git archive --format=tar --prefix=git-1.4.0/ v1.4.0^{tree} | gzip &gt;git-1.4.0.tar.gz</emphasis>
</term>
<listitem>
<simpara>
        Create a compressed tarball for v1.4.0 release, but without a
        global extended pax header.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>git archive --format=zip --prefix=git-docs/ HEAD:Documentation/ &gt; git-1.4.0-docs.zip</emphasis>
</term>
<listitem>
<simpara>
        Put everything in the current head's Documentation/ directory
        into <emphasis>git-1.4.0-docs.zip</emphasis>, with the prefix <emphasis>git-docs/</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>git archive -o latest.zip HEAD</emphasis>
</term>
<listitem>
<simpara>
        Create a Zip archive that contains the contents of the latest
        commit on the current branch. Note that the output format is
        inferred by the extension of the output file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>git archive -o latest.tar --prefix=build/ --add-file=configure --prefix= HEAD</emphasis>
</term>
<listitem>
<simpara>
        Creates a tar archive that contains the contents of the latest
        commit on the current branch with no prefix and the untracked
        file <emphasis>configure</emphasis> with the prefix <emphasis>build/</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>git config tar.tar.xz.command "xz -c"</emphasis>
</term>
<listitem>
<simpara>
        Configure a "tar.xz" format for making LZMA-compressed tarfiles.
        You can use it specifying <emphasis>--format=tar.xz</emphasis>, or by creating an
        output file like <emphasis>-o foo.tar.xz</emphasis>.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-archive(1)__see_also">
<title>SEE ALSO</title>
<simpara><xref linkend="gitattributes(5)" /></simpara>
</simplesect>
<simplesect id="git-archive(1)__git">
<title>GIT</title>
<simpara>Part of the <xref linkend="git(1)" /> suite</simpara>
</simplesect>
</sect2>
