From 779263be0d8601d866ed62619e96ddfa77c9b78f Mon Sep 17 00:00:00 2001
From: Sven Strickroth <email@cs-ware.de>
Date: Sun, 10 Dec 2023 10:17:44 +0100
Subject: [PATCH 1/2] Do not normalize safe.directory paths

Vanilla Git does not do it either (cf. https://github.com/gitster/git/blob/master/setup.c#L1150)
and calling git_fs_path_prettify_dir can cause performance issues (cf. issue #6649).

Signed-off-by: Sven Strickroth <email@cs-ware.de>
---
 src/libgit2/repository.c  | 18 +++++++++++-------
 tests/libgit2/repo/open.c | 19 +++++++++++++++++++
 2 files changed, 30 insertions(+), 7 deletions(-)

diff --git a/src/libgit2/repository.c b/src/libgit2/repository.c
index 05ece6efc..26741bbbc 100644
--- a/src/libgit2/repository.c
+++ b/src/libgit2/repository.c
@@ -537,8 +537,7 @@ static int read_gitfile(git_str *path_out, const char *file_path)
 }
 
 typedef struct {
-	const char *repo_path;
-	git_str tmp;
+	git_str repo_path;
 	bool *is_safe;
 } validate_ownership_data;
 
@@ -582,9 +581,7 @@ static int validate_ownership_cb(const git_config_entry *entry, void *payload)
 		         strncmp(test_path, "//wsl.localhost/", strlen("//wsl.localhost/")) != 0)
 			test_path++;
 #endif
-
-		if (git_fs_path_prettify_dir(&data->tmp, test_path, NULL) == 0 &&
-		    strcmp(data->tmp.ptr, data->repo_path) == 0)
+		if (strcmp(test_path, data->repo_path.ptr) == 0)
 			*data->is_safe = true;
 	}
 
@@ -597,7 +594,7 @@ static int validate_ownership_config(
 	bool use_env)
 {
 	validate_ownership_data ownership_data = {
-		path, GIT_STR_INIT, is_safe
+		GIT_STR_INIT, is_safe
 	};
 	git_config *config;
 	int error;
@@ -605,6 +602,13 @@ static int validate_ownership_config(
 	if (load_global_config(&config, use_env) != 0)
 		return 0;
 
+	git_str_sets(&ownership_data.repo_path, path);
+	if (git_str_oom(&ownership_data.repo_path))
+		return -1;
+	if (git_str_len(&ownership_data.repo_path) > 1 &&
+	    ownership_data.repo_path.ptr[git_str_len(&ownership_data.repo_path) - 1] == '/')
+		git_str_shorten(&ownership_data.repo_path, 1);
+
 	error = git_config_get_multivar_foreach(config,
 		"safe.directory", NULL,
 		validate_ownership_cb,
@@ -614,7 +618,7 @@ static int validate_ownership_config(
 		error = 0;
 
 	git_config_free(config);
-	git_str_dispose(&ownership_data.tmp);
+	git_str_dispose(&ownership_data.repo_path);
 
 	return error;
 }
diff --git a/tests/libgit2/repo/open.c b/tests/libgit2/repo/open.c
index 3d1a0620b..547e300a1 100644
--- a/tests/libgit2/repo/open.c
+++ b/tests/libgit2/repo/open.c
@@ -555,6 +555,25 @@ void test_repo_open__can_allowlist_dirs_with_problematic_ownership(void)
 
 	git_str_joinpath(&config_filename, config_path.ptr, ".gitconfig");
 
+	// Test with incorrect exception (slash at the end)
+	git_str_printf(&config_data,
+		"[foo]\n" \
+		"\tbar = Foobar\n" \
+		"\tbaz = Baz!\n" \
+		"[safe]\n" \
+		"\tdirectory = /non/existent/path\n" \
+		"\tdirectory = /\n" \
+		"\tdirectory = c:\\\\temp\n" \
+		"\tdirectory = %s/%s/\n" \
+		"\tdirectory = /tmp\n" \
+		"[bar]\n" \
+		"\tfoo = barfoo\n",
+		clar_sandbox_path(), "empty_standard_repo");
+	cl_git_rewritefile(config_filename.ptr, config_data.ptr);
+	cl_git_fail_with(GIT_EOWNER, git_repository_open(&repo, "empty_standard_repo"));
+
+	// Test with correct exception
+	git_str_clear(&config_data);
 	git_str_printf(&config_data,
 		"[foo]\n" \
 		"\tbar = Foobar\n" \
-- 
2.43.0.windows.1

